// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Caml_js_exceptions = require("bs-platform/lib/js/caml_js_exceptions.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

var principalInput = document.getElementById("principal");

var principalInput$1 = (principalInput == null) ? undefined : Caml_option.some(principalInput);

var aprInput = document.getElementById("apr");

var aprInput$1 = (aprInput == null) ? undefined : Caml_option.some(aprInput);

var yearsInput = document.getElementById("years");

var yearsInput$1 = (yearsInput == null) ? undefined : Caml_option.some(yearsInput);

var paymentElement = document.getElementById("payment");

var paymentElement$1 = (paymentElement == null) ? undefined : Caml_option.some(paymentElement);

function payment(principal, apr, years) {
  var r = apr / 12.0 / 100.0;
  var n = Caml_int32.imul(years, 12);
  var powerTerm = Math.pow(1.0 + r, n);
  return principal * (r * powerTerm) / (powerTerm - 1.0);
}

function getValue(element) {
  var __x = Belt_Option.map(element, (function (prim) {
          return prim;
        }));
  return Belt_Option.map(__x, (function (prim) {
                return prim.value;
              }));
}

function toInt(s) {
  var exit = 0;
  var result;
  try {
    result = Caml_format.caml_int_of_string(s);
    exit = 1;
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn[0] === Caml_builtin_exceptions.failure) {
      if (exn[1] === "int_of_string") {
        return undefined;
      } else {
        throw exn;
      }
    } else {
      throw exn;
    }
  }
  if (exit === 1) {
    return result;
  }
  
}

function toFloat(s) {
  var exit = 0;
  var result;
  try {
    result = Caml_format.caml_float_of_string(s);
    exit = 1;
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn[0] === Caml_builtin_exceptions.failure) {
      if (exn[1] === "float_of_string") {
        return undefined;
      } else {
        throw exn;
      }
    } else {
      throw exn;
    }
  }
  if (exit === 1) {
    return result;
  }
  
}

function currencyFmt(price) {
  if (price !== undefined) {
    return price.toFixed(2);
  } else {
    return "...";
  }
}

function handleCalculate(param) {
  var __x = getValue(principalInput$1);
  var principal = Belt_Option.flatMap(__x, toFloat);
  var __x$1 = getValue(aprInput$1);
  var apr = Belt_Option.flatMap(__x$1, toFloat);
  var __x$2 = getValue(yearsInput$1);
  var years = Belt_Option.flatMap(__x$2, toInt);
  var monthlyPayment = principal !== undefined && apr !== undefined && years !== undefined ? payment(principal, apr, years) : undefined;
  Belt_Option.map(paymentElement$1, (function (__x) {
          __x.innerText = currencyFmt(monthlyPayment);
          return /* () */0;
        }));
  return /* () */0;
}

if (!(principalInput == null)) {
  principalInput.addEventListener("change", handleCalculate);
  principalInput.addEventListener("input", handleCalculate);
}

if (!(aprInput == null)) {
  aprInput.addEventListener("change", handleCalculate);
  aprInput.addEventListener("input", handleCalculate);
}

if (!(yearsInput == null)) {
  yearsInput.addEventListener("change", handleCalculate);
  yearsInput.addEventListener("input", handleCalculate);
}

var D = 0;

var Doc = 0;

var Elem = 0;

exports.D = D;
exports.Doc = Doc;
exports.Elem = Elem;
exports.principalInput = principalInput$1;
exports.aprInput = aprInput$1;
exports.yearsInput = yearsInput$1;
exports.paymentElement = paymentElement$1;
exports.payment = payment;
exports.getValue = getValue;
exports.toInt = toInt;
exports.toFloat = toFloat;
exports.currencyFmt = currencyFmt;
exports.handleCalculate = handleCalculate;
/* principalInput Not a pure module */
