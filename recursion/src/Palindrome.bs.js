// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var Belt_Array = require("bs-platform/lib/js/belt_Array.js");

function isPalindrome(_s) {
  while(true) {
    var s = _s;
    var len = s.length;
    if (len <= 1) {
      return true;
    } else if (s[0] !== s[len - 1 | 0]) {
      return false;
    } else {
      _s = s.slice(1, len - 1 | 0);
      continue ;
    }
  };
}

console.log(isPalindrome("civic"));

console.log(isPalindrome("deed"));

console.log(isPalindrome("runner"));

function isPalindromeLogged(_s) {
  while(true) {
    var s = _s;
    var len = s.length;
    console.log("Seeing if '" + (s + "' is a palindrome"));
    if (len <= 1) {
      console.log("Length is " + (String(len) + " - we have a palindrome"));
      return true;
    } else if (s[0] !== s[len - 1 | 0]) {
      console.log("Mismatch between " + (s[0] + (" and " + (s[len - 1 | 0] + " - not a palindrome"))));
      return false;
    } else {
      _s = s.slice(1, len - 1 | 0);
      continue ;
    }
  };
}

console.log(isPalindromeLogged("civic"));

console.log(isPalindromeLogged("cynic"));

function repeatWithReduce(s, n) {
  return Belt_Array.reduce(Belt_Array.range(0, n - 1 | 0), "", (function (accumulator, _item) {
                return accumulator + s;
              }));
}

console.log(repeatWithReduce("abc", 4));

function repeatRec(s, _accumulator, _n) {
  while(true) {
    var n = _n;
    var accumulator = _accumulator;
    if (n !== 0) {
      _n = n - 1 | 0;
      _accumulator = accumulator + s;
      continue ;
    } else {
      return accumulator;
    }
  };
}

console.log(repeatRec("ha", "", 4));

function repeat(s, n) {
  var _accumulator = "";
  var _counter = n;
  while(true) {
    var counter = _counter;
    var accumulator = _accumulator;
    if (counter !== 0) {
      _counter = counter - 1 | 0;
      _accumulator = accumulator + s;
      continue ;
    } else {
      return accumulator;
    }
  };
}

console.log(repeat("ha", 4));

var testString = repeat("a", 50000);

function repeatTest(_n, _accumulatedTime) {
  while(true) {
    var accumulatedTime = _accumulatedTime;
    var n = _n;
    if (n !== 0) {
      var startTime = Date.now();
      isPalindrome(testString);
      var endTime = Date.now();
      _accumulatedTime = accumulatedTime + (endTime - startTime);
      _n = n - 1 | 0;
      continue ;
    } else {
      return accumulatedTime;
    }
  };
}

var totalTime = repeatTest(1000, 0.0);

console.log("isPalindrome (string slicing): Average time in msec:", totalTime / 1000.0);

function isPalindrome2(s) {
  var _start = 0;
  var _finish = s.length - 1 | 0;
  while(true) {
    var finish = _finish;
    var start = _start;
    if ((finish - start | 0) <= 1) {
      return true;
    } else if (s[start] !== s[finish]) {
      return false;
    } else {
      _finish = finish - 1 | 0;
      _start = start + 1 | 0;
      continue ;
    }
  };
}

console.log("civic:", isPalindrome2("civic"));

console.log("deed", isPalindrome2("deed"));

console.log("runner", isPalindrome2("runner"));

function repeatTest2(_n, _accumulatedTime) {
  while(true) {
    var accumulatedTime = _accumulatedTime;
    var n = _n;
    if (n !== 0) {
      var startTime = Date.now();
      isPalindrome2(testString);
      var endTime = Date.now();
      _accumulatedTime = accumulatedTime + (endTime - startTime);
      _n = n - 1 | 0;
      continue ;
    } else {
      return accumulatedTime;
    }
  };
}

var totalTime2 = repeatTest2(1000, 0.0);

console.log("isPalindrome2 (string from closure): Average time in msec:", totalTime2 / 1000.0);

exports.isPalindrome = isPalindrome;
exports.isPalindromeLogged = isPalindromeLogged;
exports.repeatWithReduce = repeatWithReduce;
exports.repeatRec = repeatRec;
exports.repeat = repeat;
exports.testString = testString;
exports.repeatTest = repeatTest;
exports.totalTime = totalTime;
exports.isPalindrome2 = isPalindrome2;
exports.repeatTest2 = repeatTest2;
exports.totalTime2 = totalTime2;
/*  Not a pure module */
