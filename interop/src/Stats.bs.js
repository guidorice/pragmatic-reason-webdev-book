// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Curry = require("bs-platform/lib/js/curry.js");
var Process = require("process");
var Belt_Map = require("bs-platform/lib/js/belt_Map.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Papaparse = require("papaparse");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Shirt$Interop = require("./Shirt.bs.js");
var Caml_js_exceptions = require("bs-platform/lib/js/caml_js_exceptions.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

var $$Error = /* module */[];

var Meta = /* module */[];

var Results = /* module */[];

function optFloat(str) {
  var exit = 0;
  var fNum;
  try {
    fNum = Caml_format.caml_float_of_string(str);
    exit = 1;
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn[0] === Caml_builtin_exceptions.failure) {
      if (exn[1] === "float_of_string") {
        return undefined;
      } else {
        throw exn;
      }
    } else {
      throw exn;
    }
  }
  if (exit === 1) {
    return fNum;
  }
  
}

function optInt(str) {
  var exit = 0;
  var anInt;
  try {
    anInt = Caml_format.caml_int_of_string(str);
    exit = 1;
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn[0] === Caml_builtin_exceptions.failure) {
      if (exn[1] === "int_of_string") {
        return undefined;
      } else {
        throw exn;
      }
    } else {
      throw exn;
    }
  }
  if (exit === 1) {
    return anInt;
  }
  
}

function map2(optX, optY, f) {
  if (optX !== undefined && optY !== undefined) {
    return Caml_option.some(Curry._2(f, Caml_option.valFromOption(optX), Caml_option.valFromOption(optY)));
  }
  
}

function lineReducer(acc, items) {
  if (items.length !== 7) {
    return acc;
  } else {
    var orderRecord = map2(map2(map2(map2(map2(map2(map2(/* record */[
                                  /* quantity */0,
                                  /* size : Small */0,
                                  /* sleeve : Short */0,
                                  /* color : White */0,
                                  /* pattern : Solid */0,
                                  /* cuff : Button */0,
                                  /* collar : Straight */1
                                ], optInt(Caml_array.caml_array_get(items, 0)), (function (result, n) {
                                    return /* record */[
                                            /* quantity */n,
                                            /* size */result[/* size */1],
                                            /* sleeve */result[/* sleeve */2],
                                            /* color */result[/* color */3],
                                            /* pattern */result[/* pattern */4],
                                            /* cuff */result[/* cuff */5],
                                            /* collar */result[/* collar */6]
                                          ];
                                  })), Shirt$Interop.Size[/* fromString */1](Caml_array.caml_array_get(items, 1)), (function (result, sz) {
                                return /* record */[
                                        /* quantity */result[/* quantity */0],
                                        /* size */sz,
                                        /* sleeve */result[/* sleeve */2],
                                        /* color */result[/* color */3],
                                        /* pattern */result[/* pattern */4],
                                        /* cuff */result[/* cuff */5],
                                        /* collar */result[/* collar */6]
                                      ];
                              })), Shirt$Interop.Color[/* fromString */1](Caml_array.caml_array_get(items, 2)), (function (result, c) {
                            return /* record */[
                                    /* quantity */result[/* quantity */0],
                                    /* size */result[/* size */1],
                                    /* sleeve */result[/* sleeve */2],
                                    /* color */c,
                                    /* pattern */result[/* pattern */4],
                                    /* cuff */result[/* cuff */5],
                                    /* collar */result[/* collar */6]
                                  ];
                          })), Shirt$Interop.Pattern[/* fromString */1](Caml_array.caml_array_get(items, 3)), (function (result, pat) {
                        return /* record */[
                                /* quantity */result[/* quantity */0],
                                /* size */result[/* size */1],
                                /* sleeve */result[/* sleeve */2],
                                /* color */result[/* color */3],
                                /* pattern */pat,
                                /* cuff */result[/* cuff */5],
                                /* collar */result[/* collar */6]
                              ];
                      })), Shirt$Interop.Collar[/* fromString */1](Caml_array.caml_array_get(items, 4)), (function (result, coll) {
                    return /* record */[
                            /* quantity */result[/* quantity */0],
                            /* size */result[/* size */1],
                            /* sleeve */result[/* sleeve */2],
                            /* color */result[/* color */3],
                            /* pattern */result[/* pattern */4],
                            /* cuff */result[/* cuff */5],
                            /* collar */coll
                          ];
                  })), Shirt$Interop.Sleeve[/* fromString */1](Caml_array.caml_array_get(items, 5)), (function (result, sleeve) {
                return /* record */[
                        /* quantity */result[/* quantity */0],
                        /* size */result[/* size */1],
                        /* sleeve */sleeve,
                        /* color */result[/* color */3],
                        /* pattern */result[/* pattern */4],
                        /* cuff */result[/* cuff */5],
                        /* collar */result[/* collar */6]
                      ];
              })), Shirt$Interop.Cuff[/* fromString */1](Caml_array.caml_array_get(items, 6)), (function (result, cuff) {
            return /* record */[
                    /* quantity */result[/* quantity */0],
                    /* size */result[/* size */1],
                    /* sleeve */result[/* sleeve */2],
                    /* color */result[/* color */3],
                    /* pattern */result[/* pattern */4],
                    /* cuff */cuff,
                    /* collar */result[/* collar */6]
                  ];
          }));
    if (orderRecord !== undefined) {
      return /* :: */[
              orderRecord,
              acc
            ];
    } else {
      return acc;
    }
  }
}

function printMap(title, distribution, toString) {
  console.log(title, "Quantity");
  Belt_Map.forEach(distribution, (function (key, value) {
          console.log(Curry._1(toString, key), value);
          return /* () */0;
        }));
  console.log("");
  return /* () */0;
}

function printStatistics(orders) {
  var makeDistro = function (comparator, getter) {
    return Belt_List.reduce(orders, Belt_Map.make(comparator), (function (acc, item) {
                  var n = Belt_Map.getWithDefault(acc, Curry._1(getter, item), 0);
                  return Belt_Map.set(acc, Curry._1(getter, item), n + item[/* quantity */0] | 0);
                }));
  };
  var colorDistribution = makeDistro(Shirt$Interop.ColorComparator, (function (ord) {
          return ord[/* color */3];
        }));
  printMap("Color", colorDistribution, Shirt$Interop.Color[/* toString */0]);
  var sizeDistribution = makeDistro(Shirt$Interop.SizeComparator, (function (ord) {
          return ord[/* size */1];
        }));
  printMap("Size", sizeDistribution, Shirt$Interop.Size[/* toString */0]);
  var patternDistribution = makeDistro(Shirt$Interop.PatternComparator, (function (ord) {
          return ord[/* pattern */4];
        }));
  printMap("Pattern", patternDistribution, Shirt$Interop.Pattern[/* toString */0]);
  var collarDistribution = makeDistro(Shirt$Interop.CollarComparator, (function (ord) {
          return ord[/* collar */6];
        }));
  printMap("Collar", collarDistribution, Shirt$Interop.Collar[/* toString */0]);
  var sleeveDistribution = makeDistro(Shirt$Interop.SleeveComparator, (function (ord) {
          return ord[/* sleeve */2];
        }));
  printMap("Sleeve", sleeveDistribution, Shirt$Interop.Sleeve[/* toString */0]);
  var cuffDistribution = makeDistro(Shirt$Interop.CuffComparator, (function (ord) {
          return ord[/* cuff */5];
        }));
  return printMap("Cuff", cuffDistribution, Shirt$Interop.Cuff[/* toString */0]);
}

function processFile(inFileName) {
  var fileContents = Fs.readFileSync(inFileName, "utf8");
  var parseData = Papaparse.parse(fileContents).data;
  var lines = Belt_Array.slice(parseData, 1, parseData.length - 1 | 0);
  return printStatistics(Belt_Array.reduce(lines, /* [] */0, lineReducer));
}

var nodeArg = Belt_Array.get(Process.argv, 0);

var progArg = Belt_Array.get(Process.argv, 1);

var fileArg = Belt_Array.get(Process.argv, 2);

if (fileArg !== undefined) {
  processFile(fileArg);
} else if (nodeArg !== undefined && progArg !== undefined) {
  console.log("Usage: " + (nodeArg + (" " + (progArg + " inputfile.csv"))));
} else {
  console.log("How did you get here without NodeJS or a program to run?");
}

exports.$$Error = $$Error;
exports.Meta = Meta;
exports.Results = Results;
exports.optFloat = optFloat;
exports.optInt = optInt;
exports.map2 = map2;
exports.lineReducer = lineReducer;
exports.printMap = printMap;
exports.printStatistics = printStatistics;
exports.processFile = processFile;
exports.nodeArg = nodeArg;
exports.progArg = progArg;
exports.fileArg = fileArg;
/* nodeArg Not a pure module */
