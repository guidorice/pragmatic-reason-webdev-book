// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Order$Collections = require("./Order.bs.js");
var ShirtSize$Collections = require("./ShirtSize.bs.js");

function conversion(converter, acc, item) {
  return acc + (Curry._1(converter, item) + ", ");
}

function stringOfList(items, stringify) {
  var reducerFcn = function (param, param$1) {
    return conversion(stringify, param, param$1);
  };
  return Belt_List.reduce(items, "[", reducerFcn) + "]";
}

var orderList = /* :: */[
  /* tuple */[
    7,
    /* Medium */1
  ],
  /* :: */[
    /* tuple */[
      5,
      /* XLarge */[3]
    ],
    /* :: */[
      /* tuple */[
        4,
        /* Small */0
      ],
      /* :: */[
        /* tuple */[
          6,
          /* Large */2
        ],
        /* :: */[
          /* tuple */[
            8,
            /* Small */0
          ],
          /* :: */[
            /* tuple */[
              2,
              /* Large */2
            ],
            /* :: */[
              /* tuple */[
                9,
                /* Medium */1
              ],
              /* :: */[
                /* tuple */[
                  3,
                  /* XLarge */[2]
                ],
                /* [] */0
              ]
            ]
          ]
        ]
      ]
    ]
  ]
];

function onePrice(param) {
  return param[0] * ShirtSize$Collections.price(param[1]);
}

var priceList = Belt_List.map(orderList, onePrice);

console.log(stringOfList(priceList, Pervasives.string_of_float));

function isMedium(param) {
  return param[1] === /* Medium */1;
}

var mediums = Belt_List.keep(orderList, isMedium);

var mediums2 = Belt_List.keep(orderList, (function (param) {
        return param[1] === /* Medium */1;
      }));

console.log(stringOfList(mediums, Order$Collections.toString));

console.log(stringOfList(mediums2, Order$Collections.toString));

function addPriceLogged(runningTotal, orderItem) {
  var price = onePrice(orderItem);
  console.log("" + (String(runningTotal) + (", " + (String(price) + ""))));
  return runningTotal + price;
}

console.log("Running total / Price");

var totalPrice = Belt_List.reduce(orderList, 0.0, addPriceLogged);

console.log("Total price:", totalPrice);

function addPrice(runningTotal, orderItem) {
  return runningTotal + onePrice(orderItem);
}

var totalPrice$1 = Belt_List.reduce(orderList, 0.0, addPrice);

function addPriceToTotal(runningTotal, price) {
  return runningTotal + price;
}

var __x = Belt_List.map(orderList, onePrice);

var totalPrice2 = Belt_List.reduce(__x, 0.0, addPriceToTotal);

console.log("Total price:", totalPrice2);

var __x$1 = Belt_List.map(orderList, onePrice);

var totalPrice3 = Belt_List.reduce(__x$1, 0.0, (function (prim, prim$1) {
        return prim + prim$1;
      }));

console.log("Total price:", totalPrice3);

var __x$2 = Belt_List.keep(orderList, isMedium);

var __x$3 = Belt_List.map(__x$2, onePrice);

var mediumTotal = Belt_List.reduce(__x$3, 0.0, addPriceToTotal);

console.log("Medium total:", mediumTotal);

exports.conversion = conversion;
exports.stringOfList = stringOfList;
exports.orderList = orderList;
exports.onePrice = onePrice;
exports.priceList = priceList;
exports.isMedium = isMedium;
exports.mediums = mediums;
exports.mediums2 = mediums2;
exports.addPriceLogged = addPriceLogged;
exports.addPrice = addPrice;
exports.totalPrice = totalPrice$1;
exports.addPriceToTotal = addPriceToTotal;
exports.totalPrice2 = totalPrice2;
exports.totalPrice3 = totalPrice3;
exports.mediumTotal = mediumTotal;
/* priceList Not a pure module */
