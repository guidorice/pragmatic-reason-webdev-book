// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Caml_js_exceptions = require("bs-platform/lib/js/caml_js_exceptions.js");

var items = /* :: */[
  10,
  /* :: */[
    11,
    /* :: */[
      12,
      /* :: */[
        13,
        /* :: */[
          14,
          /* :: */[
            15,
            /* :: */[
              16,
              /* [] */0
            ]
          ]
        ]
      ]
    ]
  ]
];

function sqrtPlusOne(x) {
  return Math.sqrt(x + 1.0);
}

var roots = Belt_List.makeBy(5, sqrtPlusOne);

console.log(roots);

var added1 = Belt_List.add(items, 9);

var added2 = /* :: */[
  9,
  items
];

var more = /* :: */[
  17,
  /* :: */[
    18,
    /* :: */[
      19,
      /* [] */0
    ]
  ]
];

var joined = Belt_List.concat(items, more);

var taken3 = Belt_List.take(items, 3);

var dropped3 = Belt_List.drop(items, 3);

var badTake = Belt_List.take(items, 10);

var result = Belt_List.splitAt(items, 3);

if (result !== undefined) {
  var match = result;
  console.log(match[0]);
  console.log(match[1]);
} else {
  console.log("None");
}

var optElement = Belt_List.get(items, 3);

var badOptElement = Belt_List.get(items, 10);

var element = Belt_List.getExn(items, 3);

var badElement;

try {
  badElement = Belt_List.getExn(items, 50);
}
catch (raw_exn){
  var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
  if (exn[0] === Js_exn.$$Error) {
    var match$1 = exn[1].message;
    if (match$1 !== undefined) {
      console.log("Error: " + (String(match$1) + ""));
    } else {
      console.log("An unknown error occurred");
    }
    badElement = -1;
  } else {
    throw exn;
  }
}

console.log(badElement);

exports.items = items;
exports.sqrtPlusOne = sqrtPlusOne;
exports.roots = roots;
exports.added1 = added1;
exports.added2 = added2;
exports.more = more;
exports.joined = joined;
exports.taken3 = taken3;
exports.dropped3 = dropped3;
exports.badTake = badTake;
exports.result = result;
exports.optElement = optElement;
exports.badOptElement = badOptElement;
exports.element = element;
exports.badElement = badElement;
/* roots Not a pure module */
