// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var $$String = require("bs-platform/lib/js/string.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");
var Json_encode = require("@glennsl/bs-json/src/Json_encode.bs.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");

function toString(size) {
  if (typeof size === "number") {
    switch (size) {
      case 0 : 
          return "S";
      case 1 : 
          return "M";
      case 2 : 
          return "L";
      
    }
  } else if (size.tag) {
    return $$String.make(size[0], /* "X" */88) + "L";
  } else {
    return $$String.make(size[0], /* "X" */88) + "S";
  }
}

function fromString(str) {
  var s = str.toUpperCase();
  switch (s) {
    case "L" : 
        return /* Large */2;
    case "M" : 
        return /* Medium */1;
    case "S" : 
        return /* Small */0;
    default:
      if ((/^X+S$/).test(s)) {
        return /* XSmall */Block.__(0, [s.length - 1 | 0]);
      } else if ((/^X+L$/).test(s)) {
        return /* XLarge */Block.__(1, [s.length - 1 | 0]);
      } else {
        return undefined;
      }
  }
}

var InvalidSize = Caml_exceptions.create("Shirt-ReactTemplate.Size.InvalidSize");

function decodeJson(str) {
  var match = fromString(str);
  if (match !== undefined) {
    return match;
  } else {
    throw InvalidSize;
  }
}

var Size = /* module */[
  /* toString */toString,
  /* fromString */fromString,
  /* InvalidSize */InvalidSize,
  /* decodeJson */decodeJson
];

function toString$1(sleeve) {
  switch (sleeve) {
    case 0 : 
        return "Short sleeve";
    case 1 : 
        return "Long sleeve";
    case 2 : 
        return "Extra-long sleeve";
    
  }
}

function fromString$1(str) {
  var match = str.toLowerCase();
  switch (match) {
    case "long" : 
    case "long sleeve" : 
        return /* Long */1;
    case "short" : 
    case "short sleeve" : 
        return /* Short */0;
    case "extra" : 
    case "extra-long sleeve" : 
    case "xlong" : 
    case "xlong sleeve" : 
        return /* XLong */2;
    default:
      return undefined;
  }
}

var InvalidSleeve = Caml_exceptions.create("Shirt-ReactTemplate.Sleeve.InvalidSleeve");

function decodeJson$1(str) {
  var match = fromString$1(str);
  if (match !== undefined) {
    return match;
  } else {
    throw InvalidSleeve;
  }
}

var Sleeve = /* module */[
  /* toString */toString$1,
  /* fromString */fromString$1,
  /* InvalidSleeve */InvalidSleeve,
  /* decodeJson */decodeJson$1
];

function toString$2(color) {
  switch (color) {
    case 0 : 
        return "White";
    case 1 : 
        return "Blue";
    case 2 : 
        return "Red";
    case 3 : 
        return "Green";
    case 4 : 
        return "Brown";
    
  }
}

function fromString$2(s) {
  var match = s.toLowerCase();
  switch (match) {
    case "blue" : 
        return /* Blue */1;
    case "brown" : 
        return /* Brown */4;
    case "green" : 
        return /* Green */3;
    case "red" : 
        return /* Red */2;
    case "white" : 
        return /* White */0;
    default:
      return undefined;
  }
}

var InvalidColor = Caml_exceptions.create("Shirt-ReactTemplate.Color.InvalidColor");

function decodeJson$2(str) {
  var match = fromString$2(str);
  if (match !== undefined) {
    return match;
  } else {
    throw InvalidColor;
  }
}

var Color = /* module */[
  /* toString */toString$2,
  /* fromString */fromString$2,
  /* InvalidColor */InvalidColor,
  /* decodeJson */decodeJson$2
];

function toString$3(pattern) {
  switch (pattern) {
    case 0 : 
        return "Solid";
    case 1 : 
        return "Pinstripe";
    case 2 : 
        return "Checked";
    
  }
}

function fromString$3(s) {
  var match = s.toLowerCase();
  switch (match) {
    case "check" : 
    case "checked" : 
        return /* Check */2;
    case "pinstripe" : 
        return /* Pinstripe */1;
    case "solid" : 
        return /* Solid */0;
    default:
      return undefined;
  }
}

var InvalidPattern = Caml_exceptions.create("Shirt-ReactTemplate.Pattern.InvalidPattern");

function decodeJson$3(str) {
  var match = fromString$3(str);
  if (match !== undefined) {
    return match;
  } else {
    throw InvalidPattern;
  }
}

var Pattern = /* module */[
  /* toString */toString$3,
  /* fromString */fromString$3,
  /* InvalidPattern */InvalidPattern,
  /* decodeJson */decodeJson$3
];

function encodeJson(order) {
  return Json_encode.object_(/* :: */[
              /* tuple */[
                "orderNumber",
                order[/* orderNumber */0]
              ],
              /* :: */[
                /* tuple */[
                  "quantity",
                  order[/* quantity */1]
                ],
                /* :: */[
                  /* tuple */[
                    "size",
                    toString(order[/* size */2])
                  ],
                  /* :: */[
                    /* tuple */[
                      "sleeve",
                      toString$1(order[/* sleeve */3])
                    ],
                    /* :: */[
                      /* tuple */[
                        "color",
                        toString$2(order[/* color */4])
                      ],
                      /* :: */[
                        /* tuple */[
                          "pattern",
                          toString$3(order[/* pattern */5])
                        ],
                        /* [] */0
                      ]
                    ]
                  ]
                ]
              ]
            ]);
}

function decodeJson$4(json) {
  return /* record */[
          /* orderNumber */Json_decode.field("orderNumber", Json_decode.$$int, json),
          /* quantity */Json_decode.field("quantity", Json_decode.$$int, json),
          /* size */decodeJson(Json_decode.field("size", Json_decode.string, json)),
          /* sleeve */decodeJson$1(Json_decode.field("sleeve", Json_decode.string, json)),
          /* color */decodeJson$2(Json_decode.field("color", Json_decode.string, json)),
          /* pattern */decodeJson$3(Json_decode.field("pattern", Json_decode.string, json))
        ];
}

var Order = /* module */[
  /* encodeJson */encodeJson,
  /* decodeJson */decodeJson$4
];

var E = 0;

var D = 0;

exports.Size = Size;
exports.Sleeve = Sleeve;
exports.Color = Color;
exports.Pattern = Pattern;
exports.E = E;
exports.D = D;
exports.Order = Order;
/* No side effect */
